name: Continous Integration / Continous Deployment
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  ELIXIR_VERSION: "1.14.2"
  OTP_VERSION: "25.2"

jobs:
  test:
    name: Test elixir app
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    services:
      db:
        env:
          POSTGRES_PASSWORD: postgres
        image: postgres:13
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: ["5432:5432"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup erlang & elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}
      - name: Retrieve cache
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build
            priv/plts
          key: ${{ runner.os }}-mix-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Download dependencies
        run: mix deps.get
      - name: Compile code
        run: mix compile --all-warnings --warnings-as-errors
      - name: Check retired dependencies
        run: mix hex.audit
      - name: Check code formatting
        run: mix format --check-formatted
      - name: Create PLTs for dialyxer
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt
      - name: Run static code analysis
        run: |
          mix credo
          mix dialyzer --format github
      - name: Run security vulnerabilities audit
        run: |
          mix deps.audit
          mix sobelow --config
      - name: Run tests
        env:
          MIX_ENV: test
        run: mix test
  deploy-production:
    name: Deploy app to production
    concurrency: production_environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy app to production
        run: flyctl deploy --remote-only --config ./fly.toml
